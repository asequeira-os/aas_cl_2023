(in-package :aas-graph)

(defparameter *rs* (make-random-state t))

(aseq-test:deftest aas-priority-queue-test-1
  (aseq-test:is (= (pq-left 0) 1))
  (aseq-test:is (= (pq-right 0) 2))
  (aseq-test:is (= (pq-left 1) 3))
  (aseq-test:is (= (pq-right 1) 4))
  (aseq-test:is (= (pq-left 2) 5))
  (aseq-test:is (= (pq-right 2) 6))
  (aseq-test:is (= (pq-parent 1) (pq-parent 2) 0))
  (aseq-test:is (= (pq-parent 3) (pq-parent 4) 1))
  (aseq-test:is (= (pq-parent 5) (pq-parent 6) 2)))

(defun make-test-heap (init-size max-size fn)
  (let ((pq (make-priority-queue init-size max-size fn)))
    (with-slots (pq-vector heap-size comparator max-size) pq
      (setf heap-size init-size)
      (dotimes (i init-size)
        (setf (aref pq-vector i) (random 1000 *rs*)))
      (let ((data (coerce pq-vector 'list)))
        (build-max-heap pq)
        (values pq data)))))

(defun run-test-2 (size fn)
  (multiple-value-bind (pq data) (make-test-heap size size fn)
    (let ((collect nil)
          (prev nil)
          (data (sort data fn)))
      (dotimes (i size)
        (let ((cur (heap-extract-max pq)))
          (setf collect (cons cur collect))
          (aseq-test:is (not (null cur)))
          (when prev
            (aseq-test:is (or (= prev cur) (funcall fn prev cur))))
          (setf prev cur)))
      (aseq-test:is (equal data (reverse collect))))))


(defun run-test-3 (size growth fn)
  (multiple-value-bind (pq data) (make-test-heap size (+ size growth) fn)
    (let ((collect nil)
          (prev nil))
      (dotimes (j growth)
        (let ((v (random 1000 *rs*)))
          (setf data (cons v data))
          (max-heap-insert pq v)))
      (dotimes (i (+ size growth))
        (let ((cur (heap-extract-max pq)))
          (setf collect (cons cur collect))
          (aseq-test:is (not (null cur)))
          (when prev
            (aseq-test:is (or (= prev cur) (funcall fn prev cur))))
          (setf prev cur)))
      (setf data (reverse (sort data fn)))
      (aseq-test:is (equal data collect)))))

;;todo 9 sieve test
(defun run-test-4 (size extra fn)
  (multiple-value-bind (pq data) (make-test-heap size size fn)
    (let ((collect nil)
          (prev nil))
      (setf (q-sieve pq) t)
      (dotimes (j extra)
        (let ((v (random 1000 *rs*)))
          (max-heap-insert pq v)
          (setf data (cons v data)))
        (aseq-test:is (= (heap-size pq) size (max-size pq))))
      (aseq-test:is (not (queue-empty-p pq)))
      (dotimes (i size)
        (let ((cur (heap-extract-max pq)))
          (setf collect (cons cur collect))
          (aseq-test:is (not (null cur)))
          (when prev
            (aseq-test:is (or (= prev cur) (funcall fn prev cur))))
          (setf prev cur)))
      (aseq-test:is (queue-empty-p pq))
      (setf data (reverse (sort data fn)))
      (aseq-test:is (equal (subseq data 0 size) collect)))))

(aseq-test:deftest aas-priority-queue-test-2
  (dotimes (i 13)
    (run-test-2 i #'>)
    (run-test-2 i #'<)
    (dotimes (j 10)
      (run-test-3 i j #'>)
      (run-test-3 i j #'<)
      (unless (or (zerop i) (zerop j) (zerop (mod i j)))
        (run-test-4 (mod i j) j #'>)
        (run-test-4 (mod i j) j #'<)))))
